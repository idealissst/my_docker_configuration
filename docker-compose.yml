services:
  postgres:
    restart: always
    image: "postgres:16"
    ports:
      - "5432"
    environment:
      POSTGRES_DB: thingsboard_new
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - tb-net
  cassandra:
    restart: always
    image: "cassandra:5.0"
    ports:
      - "9042"
    volumes:
      - /cassandra:/var/lib/cassandra
    networks:
      - tb-net
  kafka:
    restart: always
    image: bitnami/kafka:4.0
    ports:
      - 9092:9092 #to localhost:9092 from host machine
      - 9093 #for Kraft
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_CFG_PROCESS_ROLES: "controller,broker" #KRaft
      KAFKA_CFG_NODE_ID: "0" #KRaft
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER" #KRaft
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093" #KRaft
      KAFKA_CFG_LOG_RETENTION_MS: "300000"
      KAFKA_CFG_SEGMENT_BYTES: "26214400"
    volumes:
      - kafka-data:/bitnami
    networks:
      - tb-net
  thingsboard-pe:
    restart: always
    image: "thingsboard/tb-pe-node:4.2.0PE"
    ports:
      - "8080:8080"
      - "1883:1883"
      - "8883:8883"
      - "9090:9090"
      - "7070:7070"
      - "5683-5688:5683-5688/udp"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    environment:
      TB_SERVICE_ID: tb-pe-node
      TB_LICENSE_SECRET: dH0Wev5LgvePlaZ8xdvIwxu9
      TB_LICENSE_INSTANCE_DATA_FILE: /data/license.data
      REPORTS_SERVER_ENDPOINT_URL: http://tb-web-report:8383
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/thingsboard_new
      ### DATABASE_TS_TYPE: cassandra
      CASSANDRA_CLUSTER_NAME: "Test Cluster"
      CASSANDRA_KEYSPACE_NAME: thingsboard
      CASSANDRA_URL: cassandra:9042
      CASSANDRA_USE_CREDENTIALS: false
      TB_QUEUE_TYPE: kafka
      TB_KAFKA_SERVERS: kafka:9092
      TB_KAFKA_MAX_REQUEST_SIZE: "1048576"
      METRICS_ENABLED: "true"
      METRICS_ENDPOINTS_EXPOSE: "prometheus"
      DEBUG_SETTINGS_DEFAULT_DURATION_MINUTES: "250"
      SQL_TTL_TS_EXECUTION_INTERVAL: "100000"
    volumes:
      - license-data:/data
    depends_on:
      - postgres
      - cassandra
    networks:
      - tb-net
  tb-web-report:
    restart: always
    image: "thingsboard/tb-pe-web-report:4.2.0PE"
    ports:
      - "8383"
    depends_on:
      - thingsboard-pe
    environment:
     HTTP_BIND_ADDRESS: 0.0.0.0
     HTTP_BIND_PORT: 8383
     LOGGER_LEVEL: info
     LOG_FOLDER: logs
     LOGGER_FILENAME: tb-web-report-%DATE%.log
     DOCKER_MODE: true
     DEFAULT_PAGE_NAVIGATION_TIMEOUT: 120000
     DASHBOARD_IDLE_WAIT_TIME: 3000
     USE_NEW_PAGE_FOR_REPORT: true 
     LOCALHOST_BASE_URL_OVERRIDE: "thingsboard.local"
    networks:
      - tb-net
  nginx:
    image: nginx:latest
    hostname: thingsboard.local  # Set a custom hostname
    ports:
      - "80:80" # Map port 80 on the host to 80 in the Nginx container
      - "8383:8383"

    volumes:
      - ~/my_docker_configuration/tb-services/nginx/nginx.conf:/etc/nginx/conf.d/default.conf # Mount the Nginx config
    depends_on:
      - thingsboard-pe
    networks:
      - tb-net
    restart: unless-stopped
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - "9091:9090" # Expose Prometheus UI
    volumes:
      - ~/my_docker_configuration/tb-services/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus # Persistent storage for metrics
    networks:
      - tb-net
    restart: unless-stopped
  grafana:
    image: grafana/grafana:10.2.2
    container_name: grafana
    ports:
      - "3000:3000" # Expose Grafana UI
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin" # Replace with a secure password
      GF_SECURITY_ADMIN_USER: "admin"
    volumes:
      - grafana-data:/var/lib/grafana # Persistent storage for dashboards
    networks:
      - tb-net
    restart: unless-stopped
volumes:
  postgres-data:
    name: tb-postgres-data
    driver: local
  license-data:
    name: tb-pe-license-data
    driver: local
  kafka-data:
    name: tb-pe-kafka-data
    driver: local
  prometheus-data: # Added for Prometheus
  grafana-data: # Added for Grafana
networks:
  tb-net:
    driver: bridge